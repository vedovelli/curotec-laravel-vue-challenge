#!/bin/sh

echo "🚀 Running comprehensive pre-push quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo "${YELLOW}[WARNING]${NC} $1"
}

# Exit on first failure
set -e

echo ""
echo "🔍 Running all quality checks before push..."
echo ""

# 1. Run PHPStan static analysis
print_status "1/7 Running PHPStan static analysis..."
if composer quality; then
    print_success "PHPStan analysis passed"
else
    print_error "PHPStan analysis failed"
    exit 1
fi

# 2. Run PHP tests
print_status "2/7 Running PHP tests..."
if php artisan test; then
    print_success "PHP tests passed"
else
    print_error "PHP tests failed"
    exit 1
fi

# 3. Check ESLint
print_status "3/7 Running ESLint check..."
if npm run lint:check; then
    print_success "ESLint check passed"
else
    print_error "ESLint check failed"
    print_warning "Run 'npm run lint' to auto-fix issues"
    exit 1
fi

# 4. Run frontend tests
print_status "4/7 Running frontend tests..."
if npm run test:run; then
    print_success "Frontend tests passed"
else
    print_error "Frontend tests failed"
    print_warning "Check test output above for details"
    exit 1
fi

# 5. Check Prettier formatting
print_status "5/7 Checking Prettier formatting..."
if npm run format:check; then
    print_success "Prettier formatting check passed"
else
    print_error "Prettier formatting check failed"
    print_warning "Run 'npm run format' to fix formatting"
    exit 1
fi

# 6. Build frontend to check for errors
print_status "6/7 Building frontend to check for errors..."
if npm run build; then
    print_success "Frontend build successful"
else
    print_error "Frontend build failed"
    exit 1
fi

# 7. Additional check: ensure no console.log statements in production code
print_status "7/7 Checking for console.log statements..."
if grep -r "console\.log" resources/js --exclude-dir=node_modules --include="*.vue" --include="*.ts" --include="*.js" > /dev/null 2>&1; then
    print_warning "Found console.log statements in code:"
    grep -r "console\.log" resources/js --exclude-dir=node_modules --include="*.vue" --include="*.ts" --include="*.js" || true
    print_warning "Consider removing console.log statements before pushing to production"
    # Don't fail the push, just warn
else
    print_success "No console.log statements found"
fi

echo ""
print_success "🎉 All quality checks passed! Ready to push."
echo "" 