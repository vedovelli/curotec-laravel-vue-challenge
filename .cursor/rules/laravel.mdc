---
description: 
globs: 
alwaysApply: true
---
# Laravel Development Standards

You are an expert in Laravel, PHP, and related web development technologies.

## Core Principles
- Write concise, technical responses with accurate PHP/Laravel examples
- Prioritize SOLID principles for object-oriented programming and clean architecture
- Follow PHP and Laravel best practices, ensuring consistency and readability
- Design for scalability and maintainability, ensuring the system can grow with ease
- Prefer iteration and modularization over duplication to promote code reuse
- Use consistent and descriptive names for variables, methods, and classes to improve readability

## Dependencies
- Composer for dependency management
- PHP 8.3+
- Laravel 12.0+
- PestPHP for testing

## PHP and Laravel Standards
- Leverage PHP 8.3+ features when appropriate (e.g., typed properties, match expressions)
- Adhere to PSR-12 coding standards for consistent code style
- Always use strict typing: `declare(strict_types=1);`
- Utilize Laravel's built-in features and helpers to maximize efficiency
- Follow Laravel's directory structure and file naming conventions
- Implement robust error handling and logging:
  - Use Laravel's exception handling and logging features
  - Create custom exceptions when necessary
  - Employ try-catch blocks for expected exceptions
- Use Laravel's validation features for form and request data
- Implement middleware for request filtering and modification
- Utilize Laravel's Eloquent ORM for database interactions
- Use Laravel's query builder for complex database operations
- Create and maintain proper database migrations and seeders

## Code Architecture

### **Naming Conventions**
- Use consistent naming conventions for folders, classes, and files
- Follow Laravel's conventions: singular for models, plural for controllers (e.g., User.php, UsersController.php)
- Use PascalCase for class names, camelCase for method names, and snake_case for database columns

### **Controller Design**
- **Controllers MUST be final classes** to prevent inheritance
- **Controllers MUST be read-only** (i.e., no property mutations)
- **All controllers MUST be single-action controllers** - no exceptions
- **Controllers MUST NOT contain any business logic** - business logic belongs in Actions
- Use method injection or service classes instead of injecting dependencies directly into controllers
- Controllers should only handle HTTP concerns: request/response, validation delegation, and action orchestration

```php
// ✅ DO: Single-action controller
final readonly class CreateTaskController
{
    public function __invoke(CreateTaskRequest $request, CreateTaskAction $action): JsonResponse
    {
        $task = $action->handle($request->validated());
        
        return response()->json($task, 201);
    }
}

// ❌ DON'T: Multi-action controller with business logic
class TaskController
{
    public function store(Request $request): JsonResponse
    {
        // Business logic in controller - WRONG!
        $task = new Task();
        $task->title = $request->input('title');
        $task->save();
        
        return response()->json($task);
    }
    
    public function update(Request $request, Task $task): JsonResponse
    {
        // Multiple actions in one controller - WRONG!
    }
}
```

### **Model Design**
- **Models MUST be final classes** to ensure data integrity and prevent unexpected behavior from inheritance
- Use Eloquent relationships and accessors/mutators appropriately
- Implement model factories for testing

```php
// ✅ DO: Final model with proper typing
final class Task extends Model
{
    protected $fillable = ['title', 'description', 'status', 'due_date'];
    
    protected $casts = [
        'due_date' => 'date',
        'completed_at' => 'datetime',
    ];
    
    public function isCompleted(): bool
    {
        return $this->status === 'completed';
    }
}
```

### **Actions Architecture**
- **Create an Actions folder within the app directory**
- **Actions MUST be final and read-only classes**
- **Actions MUST publicize a single method named `handle`**
- **Actions contain ALL business logic** - keep controllers thin
- Organize actions into model-specific actions and other required actions
- Actions should focus solely on business logic, not data preparation or validation
- Use dependency injection in action constructors for models and services

```php
// ✅ DO: Proper Action implementation
final readonly class CreateTaskAction
{
    public function __construct(
        private Task $task
    ) {}

    public function handle(array $data): Task
    {
        return $this->task->create($data);
    }
}

// ✅ DO: Action with business logic
final readonly class UpdateTaskAction
{
    public function __construct(
        private Task $task
    ) {}

    public function handle(int $id, array $data): Task
    {
        $task = $this->task->findOrFail($id);
        $task->update($data);
        
        return $task->fresh();
    }
}

// ❌ DON'T: Action with validation or data preparation
final readonly class BadCreateTaskAction
{
    public function handle(Request $request): Task
    {
        // Validation should be in Form Request - WRONG!
        $validated = $request->validate([
            'title' => 'required|string',
        ]);
        
        // Data preparation should be in Form Request - WRONG!
        $data = [
            'title' => trim($validated['title']),
            'status' => 'pending',
        ];
        
        return Task::create($data);
    }
}
```

### **Form Requests**
- **Use Form Requests for ALL validation and data preparation**
- Form Requests handle validation rules, authorization, and data transformation
- Keep Actions focused on business logic by providing clean, validated data

```php
// ✅ DO: Form Request handles validation and data preparation
final class CreateTaskRequest extends FormRequest
{
    public function authorize(): bool
    {
        return true;
    }

    public function rules(): array
    {
        return [
            'title' => 'required|string|max:255',
            'description' => 'nullable|string',
            'status' => 'required|in:pending,in_progress,completed',
            'due_date' => 'nullable|date|after:today',
        ];
    }

    public function validated($key = null, $default = null): array
    {
        $validated = parent::validated();
        
        // Data preparation happens here
        $validated['title'] = trim($validated['title']);
        $validated['status'] = $validated['status'] ?? 'pending';
        
        return $validated;
    }
}
```

### **Testing with PestPHP**
- **Use PestPHP for ALL tests** - unit, feature, and browser tests
- Convert PHPUnit class-based tests to PestPHP functional style
- Use `beforeEach()` instead of `setUp()` methods
- Use `it()` functions with descriptive test names
- Leverage PestPHP's fluent assertion syntax with `expect()`

```php
// ✅ DO: PestPHP test structure
<?php

declare(strict_types=1);

use App\Actions\CreateTaskAction;
use App\Models\Task;

beforeEach(function (): void {
    $this->action = new CreateTaskAction(new Task);
});

it('creates task successfully', function (): void {
    // Arrange
    $taskData = [
        'title' => 'Test Task',
        'description' => 'Test Description',
        'status' => 'pending',
    ];

    // Act
    $task = $this->action->handle($taskData);

    // Assert
    expect($task)->toBeInstanceOf(Task::class)
        ->and($task->exists)->toBeTrue()
        ->and($task->title)->toBe('Test Task')
        ->and($task->status)->toBe('pending');

    $this->assertDatabaseHas('tasks', [
        'title' => 'Test Task',
        'status' => 'pending',
    ]);
});

it('throws exception for non-existent task', function (): void {
    expect(fn() => $this->action->handle(999, []))
        ->toThrow(ModelNotFoundException::class);
});

// ❌ DON'T: PHPUnit class-based tests
final class CreateTaskActionTest extends TestCase
{
    use RefreshDatabase;
    
    public function test_creates_task(): void
    {
        // Old PHPUnit style - convert to PestPHP
    }
}
```

### **Type Declarations**
- **Always use explicit return type declarations** for methods and functions
- **Use appropriate PHP type hints** for method parameters
- **Leverage PHP 8.3+ features** like union types and nullable types when necessary
- **Be consistent and explicit** with data type declarations throughout the codebase

```php
// ✅ DO: Proper type declarations
final readonly class TaskService
{
    public function __construct(
        private Task $task,
        private LoggerInterface $logger
    ) {}

    public function findActiveTask(int $id): ?Task
    {
        return $this->task->where('status', '!=', 'completed')
            ->find($id);
    }

    public function bulkUpdate(array $ids, array $data): int
    {
        return $this->task->whereIn('id', $ids)
            ->update($data);
    }
}
```

### **Routing**
- **Maintain consistent and organized routes**
- **Create separate route files** for each major model or feature area
- **Group related routes together** (e.g., all task-related routes in routes/tasks.php)
- **Use single-action controllers** for all routes

```php
// ✅ DO: Organized routes with single-action controllers
// routes/tasks.php
Route::prefix('tasks')->group(function () {
    Route::get('/', ListTasksController::class)->name('tasks.index');
    Route::post('/', CreateTaskController::class)->name('tasks.store');
    Route::get('/{task}', ShowTaskController::class)->name('tasks.show');
    Route::put('/{task}', UpdateTaskController::class)->name('tasks.update');
    Route::delete('/{task}', DeleteTaskController::class)->name('tasks.destroy');
});
```

## Laravel Best Practices
- Use Eloquent ORM and Query Builder over raw SQL queries when possible
- Implement Repository and Service patterns for better code organization and reusability
- Utilize Laravel's built-in authentication and authorization features (Sanctum, Policies)
- Leverage Laravel's caching mechanisms (Redis, Memcached) for improved performance
- Use job queues and Laravel Horizon for handling long-running tasks and background processing
- Use API resources and versioning for building robust and maintainable APIs
- Implement proper error handling and logging using Laravel's exception handler and logging facade
- Utilize Laravel's validation features, including Form Requests, for data integrity
- Implement database indexing and use Laravel's query optimization features for better performance
- Use Laravel Telescope for debugging and performance monitoring in development
- Leverage Laravel Nova or Filament for rapid admin panel development
- Implement proper security measures, including CSRF protection, XSS prevention, and input sanitization

## Key Architecture Points
- **Follow Laravel's MVC architecture** for clear separation of business logic, data, and presentation layers
- **Implement request validation using Form Requests** to ensure secure and validated data inputs
- **Use Laravel's built-in authentication system**, including Laravel Sanctum for API token management
- **Ensure the REST API follows Laravel standards**, using API Resources for structured and consistent responses
- **Leverage task scheduling and event listeners** to automate recurring tasks and decouple logic
- **Implement database transactions** using Laravel's database facade to ensure data consistency
- **Use Eloquent ORM for database interactions**, enforcing relationships and optimizing queries
- **Implement API versioning** for maintainability and backward compatibility
- **Optimize performance** with caching mechanisms like Redis and Memcached
- **Ensure robust error handling and logging** using Laravel's exception handler and logging features

## Error Handling
- Use Laravel's exception handling and logging features to handle exceptions
- Create custom exceptions when necessary
- Use try-catch blocks for expected exceptions
- Handle exceptions gracefully and return appropriate responses

```php
// ✅ DO: Proper exception handling in actions
final readonly class DeleteTaskAction
{
    public function handle(int $id): bool
    {
        try {
            $task = $this->task->findOrFail($id);
            return $task->delete();
        } catch (ModelNotFoundException $e) {
            Log::warning('Attempted to delete non-existent task', ['id' => $id]);
            throw $e;
        }
    }
}
```
  